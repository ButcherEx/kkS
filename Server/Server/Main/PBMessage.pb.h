// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBMessage.proto

#ifndef PROTOBUF_PBMessage_2eproto__INCLUDED
#define PROTOBUF_PBMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PBMessage_2eproto();
void protobuf_AssignDesc_PBMessage_2eproto();
void protobuf_ShutdownFile_PBMessage_2eproto();

class CG_LOGIN;

enum CG_LOGIN_VALIDATETYPE {
  CG_LOGIN_VALIDATETYPE_TEST = 0,
  CG_LOGIN_VALIDATETYPE_CYOU = 1
};
bool CG_LOGIN_VALIDATETYPE_IsValid(int value);
const CG_LOGIN_VALIDATETYPE CG_LOGIN_VALIDATETYPE_VALIDATETYPE_MIN = CG_LOGIN_VALIDATETYPE_TEST;
const CG_LOGIN_VALIDATETYPE CG_LOGIN_VALIDATETYPE_VALIDATETYPE_MAX = CG_LOGIN_VALIDATETYPE_CYOU;
const int CG_LOGIN_VALIDATETYPE_VALIDATETYPE_ARRAYSIZE = CG_LOGIN_VALIDATETYPE_VALIDATETYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* CG_LOGIN_VALIDATETYPE_descriptor();
inline const ::std::string& CG_LOGIN_VALIDATETYPE_Name(CG_LOGIN_VALIDATETYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    CG_LOGIN_VALIDATETYPE_descriptor(), value);
}
inline bool CG_LOGIN_VALIDATETYPE_Parse(
    const ::std::string& name, CG_LOGIN_VALIDATETYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CG_LOGIN_VALIDATETYPE>(
    CG_LOGIN_VALIDATETYPE_descriptor(), name, value);
}
// ===================================================================

class CG_LOGIN : public ::google::protobuf::Message {
 public:
  CG_LOGIN();
  virtual ~CG_LOGIN();

  CG_LOGIN(const CG_LOGIN& from);

  inline CG_LOGIN& operator=(const CG_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CG_LOGIN& default_instance();

  void Swap(CG_LOGIN* other);

  // implements Message ----------------------------------------------

  CG_LOGIN* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CG_LOGIN& from);
  void MergeFrom(const CG_LOGIN& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CG_LOGIN_VALIDATETYPE VALIDATETYPE;
  static const VALIDATETYPE TEST = CG_LOGIN_VALIDATETYPE_TEST;
  static const VALIDATETYPE CYOU = CG_LOGIN_VALIDATETYPE_CYOU;
  static inline bool VALIDATETYPE_IsValid(int value) {
    return CG_LOGIN_VALIDATETYPE_IsValid(value);
  }
  static const VALIDATETYPE VALIDATETYPE_MIN =
    CG_LOGIN_VALIDATETYPE_VALIDATETYPE_MIN;
  static const VALIDATETYPE VALIDATETYPE_MAX =
    CG_LOGIN_VALIDATETYPE_VALIDATETYPE_MAX;
  static const int VALIDATETYPE_ARRAYSIZE =
    CG_LOGIN_VALIDATETYPE_VALIDATETYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VALIDATETYPE_descriptor() {
    return CG_LOGIN_VALIDATETYPE_descriptor();
  }
  static inline const ::std::string& VALIDATETYPE_Name(VALIDATETYPE value) {
    return CG_LOGIN_VALIDATETYPE_Name(value);
  }
  static inline bool VALIDATETYPE_Parse(const ::std::string& name,
      VALIDATETYPE* value) {
    return CG_LOGIN_VALIDATETYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 vtype = 1;
  inline bool has_vtype() const;
  inline void clear_vtype();
  static const int kVtypeFieldNumber = 1;
  inline ::google::protobuf::int32 vtype() const;
  inline void set_vtype(::google::protobuf::int32 value);

  // required int32 gameversion = 2;
  inline bool has_gameversion() const;
  inline void clear_gameversion();
  static const int kGameversionFieldNumber = 2;
  inline ::google::protobuf::int32 gameversion() const;
  inline void set_gameversion(::google::protobuf::int32 value);

  // required int32 programversion = 3;
  inline bool has_programversion() const;
  inline void clear_programversion();
  static const int kProgramversionFieldNumber = 3;
  inline ::google::protobuf::int32 programversion() const;
  inline void set_programversion(::google::protobuf::int32 value);

  // required int32 publicresourceversion = 4;
  inline bool has_publicresourceversion() const;
  inline void clear_publicresourceversion();
  static const int kPublicresourceversionFieldNumber = 4;
  inline ::google::protobuf::int32 publicresourceversion() const;
  inline void set_publicresourceversion(::google::protobuf::int32 value);

  // required int32 maxpacketid = 5;
  inline bool has_maxpacketid() const;
  inline void clear_maxpacketid();
  static const int kMaxpacketidFieldNumber = 5;
  inline ::google::protobuf::int32 maxpacketid() const;
  inline void set_maxpacketid(::google::protobuf::int32 value);

  // required int32 forceenter = 6;
  inline bool has_forceenter() const;
  inline void clear_forceenter();
  static const int kForceenterFieldNumber = 6;
  inline ::google::protobuf::int32 forceenter() const;
  inline void set_forceenter(::google::protobuf::int32 value);

  // required string deviceid = 7;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 7;
  inline const ::std::string& deviceid() const;
  inline void set_deviceid(const ::std::string& value);
  inline void set_deviceid(const char* value);
  inline void set_deviceid(const char* value, size_t size);
  inline ::std::string* mutable_deviceid();
  inline ::std::string* release_deviceid();
  inline void set_allocated_deviceid(::std::string* deviceid);

  // required string devicetype = 8;
  inline bool has_devicetype() const;
  inline void clear_devicetype();
  static const int kDevicetypeFieldNumber = 8;
  inline const ::std::string& devicetype() const;
  inline void set_devicetype(const ::std::string& value);
  inline void set_devicetype(const char* value);
  inline void set_devicetype(const char* value, size_t size);
  inline ::std::string* mutable_devicetype();
  inline ::std::string* release_devicetype();
  inline void set_allocated_devicetype(::std::string* devicetype);

  // required string deviceversion = 9;
  inline bool has_deviceversion() const;
  inline void clear_deviceversion();
  static const int kDeviceversionFieldNumber = 9;
  inline const ::std::string& deviceversion() const;
  inline void set_deviceversion(const ::std::string& value);
  inline void set_deviceversion(const char* value);
  inline void set_deviceversion(const char* value, size_t size);
  inline ::std::string* mutable_deviceversion();
  inline ::std::string* release_deviceversion();
  inline void set_allocated_deviceversion(::std::string* deviceversion);

  // @@protoc_insertion_point(class_scope:CG_LOGIN)
 private:
  inline void set_has_vtype();
  inline void clear_has_vtype();
  inline void set_has_gameversion();
  inline void clear_has_gameversion();
  inline void set_has_programversion();
  inline void clear_has_programversion();
  inline void set_has_publicresourceversion();
  inline void clear_has_publicresourceversion();
  inline void set_has_maxpacketid();
  inline void clear_has_maxpacketid();
  inline void set_has_forceenter();
  inline void clear_has_forceenter();
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_devicetype();
  inline void clear_has_devicetype();
  inline void set_has_deviceversion();
  inline void clear_has_deviceversion();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 vtype_;
  ::google::protobuf::int32 gameversion_;
  ::google::protobuf::int32 programversion_;
  ::google::protobuf::int32 publicresourceversion_;
  ::google::protobuf::int32 maxpacketid_;
  ::google::protobuf::int32 forceenter_;
  ::std::string* deviceid_;
  ::std::string* devicetype_;
  ::std::string* deviceversion_;
  friend void  protobuf_AddDesc_PBMessage_2eproto();
  friend void protobuf_AssignDesc_PBMessage_2eproto();
  friend void protobuf_ShutdownFile_PBMessage_2eproto();

  void InitAsDefaultInstance();
  static CG_LOGIN* default_instance_;
};
// ===================================================================


// ===================================================================

// CG_LOGIN

// required int32 vtype = 1;
inline bool CG_LOGIN::has_vtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CG_LOGIN::set_has_vtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CG_LOGIN::clear_has_vtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CG_LOGIN::clear_vtype() {
  vtype_ = 0;
  clear_has_vtype();
}
inline ::google::protobuf::int32 CG_LOGIN::vtype() const {
  // @@protoc_insertion_point(field_get:CG_LOGIN.vtype)
  return vtype_;
}
inline void CG_LOGIN::set_vtype(::google::protobuf::int32 value) {
  set_has_vtype();
  vtype_ = value;
  // @@protoc_insertion_point(field_set:CG_LOGIN.vtype)
}

// required int32 gameversion = 2;
inline bool CG_LOGIN::has_gameversion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CG_LOGIN::set_has_gameversion() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CG_LOGIN::clear_has_gameversion() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CG_LOGIN::clear_gameversion() {
  gameversion_ = 0;
  clear_has_gameversion();
}
inline ::google::protobuf::int32 CG_LOGIN::gameversion() const {
  // @@protoc_insertion_point(field_get:CG_LOGIN.gameversion)
  return gameversion_;
}
inline void CG_LOGIN::set_gameversion(::google::protobuf::int32 value) {
  set_has_gameversion();
  gameversion_ = value;
  // @@protoc_insertion_point(field_set:CG_LOGIN.gameversion)
}

// required int32 programversion = 3;
inline bool CG_LOGIN::has_programversion() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CG_LOGIN::set_has_programversion() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CG_LOGIN::clear_has_programversion() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CG_LOGIN::clear_programversion() {
  programversion_ = 0;
  clear_has_programversion();
}
inline ::google::protobuf::int32 CG_LOGIN::programversion() const {
  // @@protoc_insertion_point(field_get:CG_LOGIN.programversion)
  return programversion_;
}
inline void CG_LOGIN::set_programversion(::google::protobuf::int32 value) {
  set_has_programversion();
  programversion_ = value;
  // @@protoc_insertion_point(field_set:CG_LOGIN.programversion)
}

// required int32 publicresourceversion = 4;
inline bool CG_LOGIN::has_publicresourceversion() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CG_LOGIN::set_has_publicresourceversion() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CG_LOGIN::clear_has_publicresourceversion() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CG_LOGIN::clear_publicresourceversion() {
  publicresourceversion_ = 0;
  clear_has_publicresourceversion();
}
inline ::google::protobuf::int32 CG_LOGIN::publicresourceversion() const {
  // @@protoc_insertion_point(field_get:CG_LOGIN.publicresourceversion)
  return publicresourceversion_;
}
inline void CG_LOGIN::set_publicresourceversion(::google::protobuf::int32 value) {
  set_has_publicresourceversion();
  publicresourceversion_ = value;
  // @@protoc_insertion_point(field_set:CG_LOGIN.publicresourceversion)
}

// required int32 maxpacketid = 5;
inline bool CG_LOGIN::has_maxpacketid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CG_LOGIN::set_has_maxpacketid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CG_LOGIN::clear_has_maxpacketid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CG_LOGIN::clear_maxpacketid() {
  maxpacketid_ = 0;
  clear_has_maxpacketid();
}
inline ::google::protobuf::int32 CG_LOGIN::maxpacketid() const {
  // @@protoc_insertion_point(field_get:CG_LOGIN.maxpacketid)
  return maxpacketid_;
}
inline void CG_LOGIN::set_maxpacketid(::google::protobuf::int32 value) {
  set_has_maxpacketid();
  maxpacketid_ = value;
  // @@protoc_insertion_point(field_set:CG_LOGIN.maxpacketid)
}

// required int32 forceenter = 6;
inline bool CG_LOGIN::has_forceenter() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CG_LOGIN::set_has_forceenter() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CG_LOGIN::clear_has_forceenter() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CG_LOGIN::clear_forceenter() {
  forceenter_ = 0;
  clear_has_forceenter();
}
inline ::google::protobuf::int32 CG_LOGIN::forceenter() const {
  // @@protoc_insertion_point(field_get:CG_LOGIN.forceenter)
  return forceenter_;
}
inline void CG_LOGIN::set_forceenter(::google::protobuf::int32 value) {
  set_has_forceenter();
  forceenter_ = value;
  // @@protoc_insertion_point(field_set:CG_LOGIN.forceenter)
}

// required string deviceid = 7;
inline bool CG_LOGIN::has_deviceid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CG_LOGIN::set_has_deviceid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CG_LOGIN::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CG_LOGIN::clear_deviceid() {
  if (deviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deviceid_->clear();
  }
  clear_has_deviceid();
}
inline const ::std::string& CG_LOGIN::deviceid() const {
  // @@protoc_insertion_point(field_get:CG_LOGIN.deviceid)
  return *deviceid_;
}
inline void CG_LOGIN::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
  // @@protoc_insertion_point(field_set:CG_LOGIN.deviceid)
}
inline void CG_LOGIN::set_deviceid(const char* value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
  // @@protoc_insertion_point(field_set_char:CG_LOGIN.deviceid)
}
inline void CG_LOGIN::set_deviceid(const char* value, size_t size) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CG_LOGIN.deviceid)
}
inline ::std::string* CG_LOGIN::mutable_deviceid() {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deviceid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CG_LOGIN.deviceid)
  return deviceid_;
}
inline ::std::string* CG_LOGIN::release_deviceid() {
  clear_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = deviceid_;
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CG_LOGIN::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deviceid_;
  }
  if (deviceid) {
    set_has_deviceid();
    deviceid_ = deviceid;
  } else {
    clear_has_deviceid();
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CG_LOGIN.deviceid)
}

// required string devicetype = 8;
inline bool CG_LOGIN::has_devicetype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CG_LOGIN::set_has_devicetype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CG_LOGIN::clear_has_devicetype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CG_LOGIN::clear_devicetype() {
  if (devicetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicetype_->clear();
  }
  clear_has_devicetype();
}
inline const ::std::string& CG_LOGIN::devicetype() const {
  // @@protoc_insertion_point(field_get:CG_LOGIN.devicetype)
  return *devicetype_;
}
inline void CG_LOGIN::set_devicetype(const ::std::string& value) {
  set_has_devicetype();
  if (devicetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicetype_ = new ::std::string;
  }
  devicetype_->assign(value);
  // @@protoc_insertion_point(field_set:CG_LOGIN.devicetype)
}
inline void CG_LOGIN::set_devicetype(const char* value) {
  set_has_devicetype();
  if (devicetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicetype_ = new ::std::string;
  }
  devicetype_->assign(value);
  // @@protoc_insertion_point(field_set_char:CG_LOGIN.devicetype)
}
inline void CG_LOGIN::set_devicetype(const char* value, size_t size) {
  set_has_devicetype();
  if (devicetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicetype_ = new ::std::string;
  }
  devicetype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CG_LOGIN.devicetype)
}
inline ::std::string* CG_LOGIN::mutable_devicetype() {
  set_has_devicetype();
  if (devicetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicetype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CG_LOGIN.devicetype)
  return devicetype_;
}
inline ::std::string* CG_LOGIN::release_devicetype() {
  clear_has_devicetype();
  if (devicetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devicetype_;
    devicetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CG_LOGIN::set_allocated_devicetype(::std::string* devicetype) {
  if (devicetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicetype_;
  }
  if (devicetype) {
    set_has_devicetype();
    devicetype_ = devicetype;
  } else {
    clear_has_devicetype();
    devicetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CG_LOGIN.devicetype)
}

// required string deviceversion = 9;
inline bool CG_LOGIN::has_deviceversion() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CG_LOGIN::set_has_deviceversion() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CG_LOGIN::clear_has_deviceversion() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CG_LOGIN::clear_deviceversion() {
  if (deviceversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deviceversion_->clear();
  }
  clear_has_deviceversion();
}
inline const ::std::string& CG_LOGIN::deviceversion() const {
  // @@protoc_insertion_point(field_get:CG_LOGIN.deviceversion)
  return *deviceversion_;
}
inline void CG_LOGIN::set_deviceversion(const ::std::string& value) {
  set_has_deviceversion();
  if (deviceversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deviceversion_ = new ::std::string;
  }
  deviceversion_->assign(value);
  // @@protoc_insertion_point(field_set:CG_LOGIN.deviceversion)
}
inline void CG_LOGIN::set_deviceversion(const char* value) {
  set_has_deviceversion();
  if (deviceversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deviceversion_ = new ::std::string;
  }
  deviceversion_->assign(value);
  // @@protoc_insertion_point(field_set_char:CG_LOGIN.deviceversion)
}
inline void CG_LOGIN::set_deviceversion(const char* value, size_t size) {
  set_has_deviceversion();
  if (deviceversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deviceversion_ = new ::std::string;
  }
  deviceversion_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CG_LOGIN.deviceversion)
}
inline ::std::string* CG_LOGIN::mutable_deviceversion() {
  set_has_deviceversion();
  if (deviceversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deviceversion_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CG_LOGIN.deviceversion)
  return deviceversion_;
}
inline ::std::string* CG_LOGIN::release_deviceversion() {
  clear_has_deviceversion();
  if (deviceversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = deviceversion_;
    deviceversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CG_LOGIN::set_allocated_deviceversion(::std::string* deviceversion) {
  if (deviceversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deviceversion_;
  }
  if (deviceversion) {
    set_has_deviceversion();
    deviceversion_ = deviceversion;
  } else {
    clear_has_deviceversion();
    deviceversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CG_LOGIN.deviceversion)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::CG_LOGIN_VALIDATETYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CG_LOGIN_VALIDATETYPE>() {
  return ::CG_LOGIN_VALIDATETYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PBMessage_2eproto__INCLUDED
