// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PBMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_PBMessage_2eproto() {
  delete CG_LOGIN::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_PBMessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_PBMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  CG_LOGIN::default_instance_ = new CG_LOGIN();
  CG_LOGIN::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PBMessage_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_PBMessage_2eproto_once_);
void protobuf_AddDesc_PBMessage_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_PBMessage_2eproto_once_,
                 &protobuf_AddDesc_PBMessage_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PBMessage_2eproto {
  StaticDescriptorInitializer_PBMessage_2eproto() {
    protobuf_AddDesc_PBMessage_2eproto();
  }
} static_descriptor_initializer_PBMessage_2eproto_;
#endif

// ===================================================================

bool CG_LOGIN_VALIDATETYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CG_LOGIN_VALIDATETYPE CG_LOGIN::TEST;
const CG_LOGIN_VALIDATETYPE CG_LOGIN::CYOU;
const CG_LOGIN_VALIDATETYPE CG_LOGIN::VALIDATETYPE_MIN;
const CG_LOGIN_VALIDATETYPE CG_LOGIN::VALIDATETYPE_MAX;
const int CG_LOGIN::VALIDATETYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CG_LOGIN::kVtypeFieldNumber;
const int CG_LOGIN::kGameversionFieldNumber;
const int CG_LOGIN::kProgramversionFieldNumber;
const int CG_LOGIN::kPublicresourceversionFieldNumber;
const int CG_LOGIN::kMaxpacketidFieldNumber;
const int CG_LOGIN::kForceenterFieldNumber;
const int CG_LOGIN::kDeviceidFieldNumber;
const int CG_LOGIN::kDevicetypeFieldNumber;
const int CG_LOGIN::kDeviceversionFieldNumber;
#endif  // !_MSC_VER

CG_LOGIN::CG_LOGIN()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CG_LOGIN)
}

void CG_LOGIN::InitAsDefaultInstance() {
}

CG_LOGIN::CG_LOGIN(const CG_LOGIN& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CG_LOGIN)
}

void CG_LOGIN::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  vtype_ = 0;
  gameversion_ = 0;
  programversion_ = 0;
  publicresourceversion_ = 0;
  maxpacketid_ = 0;
  forceenter_ = 0;
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_LOGIN::~CG_LOGIN() {
  // @@protoc_insertion_point(destructor:CG_LOGIN)
  SharedDtor();
}

void CG_LOGIN::SharedDtor() {
  if (deviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deviceid_;
  }
  if (devicetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicetype_;
  }
  if (deviceversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deviceversion_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CG_LOGIN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CG_LOGIN& CG_LOGIN::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PBMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
#endif
  return *default_instance_;
}

CG_LOGIN* CG_LOGIN::default_instance_ = NULL;

CG_LOGIN* CG_LOGIN::New() const {
  return new CG_LOGIN;
}

void CG_LOGIN::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CG_LOGIN*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(vtype_, forceenter_);
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deviceid_->clear();
      }
    }
    if (has_devicetype()) {
      if (devicetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devicetype_->clear();
      }
    }
  }
  if (has_deviceversion()) {
    if (deviceversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      deviceversion_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CG_LOGIN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:CG_LOGIN)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 vtype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vtype_)));
          set_has_vtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gameversion;
        break;
      }

      // required int32 gameversion = 2;
      case 2: {
        if (tag == 16) {
         parse_gameversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameversion_)));
          set_has_gameversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_programversion;
        break;
      }

      // required int32 programversion = 3;
      case 3: {
        if (tag == 24) {
         parse_programversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &programversion_)));
          set_has_programversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_publicresourceversion;
        break;
      }

      // required int32 publicresourceversion = 4;
      case 4: {
        if (tag == 32) {
         parse_publicresourceversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &publicresourceversion_)));
          set_has_publicresourceversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_maxpacketid;
        break;
      }

      // required int32 maxpacketid = 5;
      case 5: {
        if (tag == 40) {
         parse_maxpacketid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxpacketid_)));
          set_has_maxpacketid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_forceenter;
        break;
      }

      // required int32 forceenter = 6;
      case 6: {
        if (tag == 48) {
         parse_forceenter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &forceenter_)));
          set_has_forceenter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_deviceid;
        break;
      }

      // required string deviceid = 7;
      case 7: {
        if (tag == 58) {
         parse_deviceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_devicetype;
        break;
      }

      // required string devicetype = 8;
      case 8: {
        if (tag == 66) {
         parse_devicetype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicetype()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_deviceversion;
        break;
      }

      // required string deviceversion = 9;
      case 9: {
        if (tag == 74) {
         parse_deviceversion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceversion()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CG_LOGIN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CG_LOGIN)
  return false;
#undef DO_
}

void CG_LOGIN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CG_LOGIN)
  // required int32 vtype = 1;
  if (has_vtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vtype(), output);
  }

  // required int32 gameversion = 2;
  if (has_gameversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameversion(), output);
  }

  // required int32 programversion = 3;
  if (has_programversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->programversion(), output);
  }

  // required int32 publicresourceversion = 4;
  if (has_publicresourceversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->publicresourceversion(), output);
  }

  // required int32 maxpacketid = 5;
  if (has_maxpacketid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxpacketid(), output);
  }

  // required int32 forceenter = 6;
  if (has_forceenter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->forceenter(), output);
  }

  // required string deviceid = 7;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->deviceid(), output);
  }

  // required string devicetype = 8;
  if (has_devicetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->devicetype(), output);
  }

  // required string deviceversion = 9;
  if (has_deviceversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->deviceversion(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:CG_LOGIN)
}

int CG_LOGIN::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 vtype = 1;
    if (has_vtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vtype());
    }

    // required int32 gameversion = 2;
    if (has_gameversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameversion());
    }

    // required int32 programversion = 3;
    if (has_programversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->programversion());
    }

    // required int32 publicresourceversion = 4;
    if (has_publicresourceversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->publicresourceversion());
    }

    // required int32 maxpacketid = 5;
    if (has_maxpacketid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxpacketid());
    }

    // required int32 forceenter = 6;
    if (has_forceenter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->forceenter());
    }

    // required string deviceid = 7;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

    // required string devicetype = 8;
    if (has_devicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicetype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string deviceversion = 9;
    if (has_deviceversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceversion());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_LOGIN::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CG_LOGIN*>(&from));
}

void CG_LOGIN::MergeFrom(const CG_LOGIN& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vtype()) {
      set_vtype(from.vtype());
    }
    if (from.has_gameversion()) {
      set_gameversion(from.gameversion());
    }
    if (from.has_programversion()) {
      set_programversion(from.programversion());
    }
    if (from.has_publicresourceversion()) {
      set_publicresourceversion(from.publicresourceversion());
    }
    if (from.has_maxpacketid()) {
      set_maxpacketid(from.maxpacketid());
    }
    if (from.has_forceenter()) {
      set_forceenter(from.forceenter());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_devicetype()) {
      set_devicetype(from.devicetype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_deviceversion()) {
      set_deviceversion(from.deviceversion());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CG_LOGIN::CopyFrom(const CG_LOGIN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_LOGIN::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void CG_LOGIN::Swap(CG_LOGIN* other) {
  if (other != this) {
    std::swap(vtype_, other->vtype_);
    std::swap(gameversion_, other->gameversion_);
    std::swap(programversion_, other->programversion_);
    std::swap(publicresourceversion_, other->publicresourceversion_);
    std::swap(maxpacketid_, other->maxpacketid_);
    std::swap(forceenter_, other->forceenter_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(devicetype_, other->devicetype_);
    std::swap(deviceversion_, other->deviceversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CG_LOGIN::GetTypeName() const {
  return "CG_LOGIN";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
